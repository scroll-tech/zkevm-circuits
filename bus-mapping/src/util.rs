//! ..
use eth_types::{Hash, U256};
pub use eth_types::{KECCAK_CODE_HASH_EMPTY, POSEIDON_CODE_HASH_EMPTY};
use halo2_proofs::halo2curves::{bn256::Fr, group::ff::PrimeField};
use std::{convert::Infallible, str::FromStr, sync::LazyLock};

/// ..
pub fn read_env_var<T: Clone + FromStr>(var_name: &'static str, default: T) -> T {
    std::env::var(var_name)
        .map(|s| s.parse::<T>().unwrap_or_else(|_| default.clone()))
        .unwrap_or(default)
}
/// env var for Geth trace sanity check level
pub static GETH_TRACE_CHECK_LEVEL: LazyLock<GethTraceSanityCheckLevel> =
    LazyLock::new(|| read_env_var("GETH_TRACE_CHECK_LEVEL", GethTraceSanityCheckLevel::None));

/// Geth trace sanity check level
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum GethTraceSanityCheckLevel {
    /// No sanity check
    None,
    /// Check sanity and log error
    Check,
    /// Panic on error
    Strict,
}

impl GethTraceSanityCheckLevel {
    /// Whether to do sanity check
    pub fn should_check(&self) -> bool {
        *self != GethTraceSanityCheckLevel::None
    }

    /// Whether to panic on error
    pub fn should_panic(&self) -> bool {
        *self == GethTraceSanityCheckLevel::Strict
    }
}

impl FromStr for GethTraceSanityCheckLevel {
    type Err = Infallible;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "strict" => Ok(GethTraceSanityCheckLevel::Strict),
            _ if !s.is_empty() => Ok(GethTraceSanityCheckLevel::Check),
            _ => Ok(GethTraceSanityCheckLevel::None),
        }
    }
}

/// Default number of bytes to pack into a field element.
pub const POSEIDON_HASH_BYTES_IN_FIELD: usize = 31;

/// Default code hash
pub fn hash_code(code: &[u8]) -> Hash {
    #[cfg(feature = "scroll")]
    return hash_code_poseidon(code);
    #[cfg(not(feature = "scroll"))]
    return hash_code_keccak(code);
}

/// Keccak code hash
pub fn hash_code_keccak(code: &[u8]) -> Hash {
    eth_types::H256(ethers_core::utils::keccak256(code))
}

/// Poseidon code hash
pub fn hash_code_poseidon(code: &[u8]) -> Hash {
    use hash_circuit::hash::{Hashable, MessageHashable, HASHABLE_DOMAIN_SPEC};

    let bytes_in_field = POSEIDON_HASH_BYTES_IN_FIELD;
    let fls = (0..(code.len() / bytes_in_field))
        .map(|i| i * bytes_in_field)
        .map(|i| {
            let mut buf: [u8; 32] = [0; 32];
            U256::from_big_endian(&code[i..i + bytes_in_field]).to_little_endian(&mut buf);
            Fr::from_bytes(&buf).unwrap()
        });
    let msgs: Vec<_> = fls
        .chain(if code.len() % bytes_in_field == 0 {
            None
        } else {
            let last_code = &code[code.len() - code.len() % bytes_in_field..];
            // pad to bytes_in_field
            let mut last_buf = vec![0u8; bytes_in_field];
            last_buf.as_mut_slice()[..last_code.len()].copy_from_slice(last_code);
            let mut buf: [u8; 32] = [0; 32];
            U256::from_big_endian(&last_buf).to_little_endian(&mut buf);
            Some(Fr::from_bytes(&buf).unwrap())
        })
        .collect();

    let h = if msgs.is_empty() {
        // the empty code hash is overlapped with simple hash on [0, 0]
        // an issue in poseidon primitive prevent us calculate it from hash_msg
        Fr::hash_with_domain([Fr::zero(), Fr::zero()], Fr::zero())
    } else {
        Fr::hash_msg(&msgs, Some(code.len() as u128 * HASHABLE_DOMAIN_SPEC))
    };

    let mut buf: [u8; 32] = [0; 32];
    U256::from_little_endian(h.to_repr().as_ref()).to_big_endian(&mut buf);
    Hash::from_slice(&buf)
}

#[test]
fn test_empty_code_hash() {
    assert_eq!(*POSEIDON_CODE_HASH_EMPTY, hash_code_poseidon(&[]));
    assert_eq!(*KECCAK_CODE_HASH_EMPTY, hash_code_keccak(&[]));
}

#[cfg(feature = "scroll")]
#[test]
fn code_hashing() {
    assert_eq!(
        format!("{:?}", hash_code(&[])),
        "0x2098f5fb9e239eab3ceac3f27b81e481dc3124d55ffed523a839ee8446b64864"
    );

    let simple_byte: [u8; 1] = [0];
    assert_eq!(
        format!("{:?}", hash_code(&simple_byte)),
        "0x29f94b67ee4e78b2bb08da025f9943c1201a7af025a27600c2dd0a2e71c7cf8b"
    );

    let simple_byte: [u8; 2] = [0, 1];
    assert_eq!(
        format!("{:?}", hash_code(&simple_byte)),
        "0x1bd41d9cc3187305de467d841b6b999d1222260b7057cb6f63d2ae92c43a7322"
    );

    let byte32: [u8; 32] = [1; 32];
    assert_eq!(
        format!("{:?}", hash_code(&byte32)),
        "0x0b46d156183dffdbed8e6c6b0af139b95c058e735878ca7f4dca334e0ea8bd20"
    );

    let example = "";
    let bytes = hex::decode(example).unwrap();

    assert_eq!(
        format!("{:?}", hash_code(&bytes)),
        "0x26f706f949ff4faad54ee72308e9d30ece46e37cf8b9968bdb274e750a264937"
    );
}
